// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  out vec3 pos;

  const float waterwid = 0.5;
  const float deepwid = 0.01;
  const float pi = 3.141592653589793;

  float CountScale(float left,float right)
  {
    //水深
    // float depth = pos.y;
    float depth = 0.2;
    //防止怪异现象
    if (depth > 1.)
    {
        depth = 1.;
    }
    else if (depth < 0.)
    {
        depth = 0.;
    }
    //像素Y值缩放
    float scale = 1.-depth;
    float length = right - left;
    float mysca = pi/length;
    //向下弯曲的坐标值定在0.-1.之间
    float mpos = (v_uv0.x - left)/length;
    if (mpos < (1.-deepwid)/2. )
    {
        mpos = 1./(1.-deepwid)*(mpos);
        scale = (1.-depth) + depth *(0.5001-0.5*(sin(-pi/2.+mpos*2.*pi)) );
    }
    else if( mpos > (1.+deepwid)/2.)
    {
        mpos = 1./(1.-deepwid)*(mpos-deepwid);
        scale = (1.-depth)+ (depth)*(.5001-.5*( sin(-pi/2.+(mpos)*2.*pi) ) );
    }
    return scale;
  }
  void main () {

    // vec4 c = v_color * texture2D(texture, v_uv0);
    // float clrbright = (c.r + c.g + c.b) * (1. / 3.);
    // float gray = (0.6) * clrbright;
    // gl_FragColor = vec4(gray, gray, gray, c.a);
    float scale = 1.;
    float left  = pos.x - waterwid/2.;
    float right = pos.x + waterwid/2.;
    scale = CountScale(left,right);
    vec4 mycolor = vec4(0.0);
    // mycolor = texture2D(texture, vec2(v_uv0.x, 1./2.*(v_uv0.y-1.+2.))  );
    mycolor = texture2D(texture, vec2(v_uv0.x,1./scale*(v_uv0.y-1.+scale))  );
    gl_FragColor = mycolor;
  }
}%
