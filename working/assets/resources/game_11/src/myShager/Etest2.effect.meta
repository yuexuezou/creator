{
  "ver": "1.0.23",
  "uuid": "c93db887-b6ab-484c-9148-d905e55f4641",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nconst float waterwid = 0.5;\nconst float deepwid = 0.01;\nconst float pi = 3.141592653589793;\n\nfloat CountScale(float left,float right)\n{\n\n  float depth = 0.2;\n\n  if (depth > 1.)\n  {\n      depth = 1.;\n  }\n  else if (depth < 0.)\n  {\n      depth = 0.;\n  }\n\n  float scale = 1.-depth;\n  float length = right - left;\n  float mysca = pi/length;\n\n  float mgl_FragColor = (v_uv0.x - left)/length;\n  if (mgl_FragColor < (1.-deepwid)/2. )\n  {\n      mgl_FragColor = 1./(1.-deepwid)*(mgl_FragColor);\n      scale = (1.-depth) + depth *(0.5001-0.5*(sin(-pi/2.+mgl_FragColor*2.*pi)) );\n  }\n  else if( mgl_FragColor > (1.+deepwid)/2.)\n  {\n      mgl_FragColor = 1./(1.-deepwid)*(mgl_FragColor-deepwid);\n      scale = (1.-depth)+ (depth)*(.5001-.5*( sin(-pi/2.+(mgl_FragColor)*2.*pi) ) );\n  }\n  return scale;\n}\nvoid main () {\n\n  float scale = 1.;\n  float left  = gl_FragColor.x - waterwid/2.;\n  float right = gl_FragColor.x + waterwid/2.;\n  scale = CountScale(left,right);\n  vec4 mycolor = vec4(0.0);\n\n  mycolor = texture2D(texture, vec2(v_uv0.x,1./scale*(v_uv0.y-1.+scale))  );\n  gl_FragColor = mycolor;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nout vec3 pos;\n\nconst float waterwid = 0.5;\nconst float deepwid = 0.01;\nconst float pi = 3.141592653589793;\n\nfloat CountScale(float left,float right)\n{\n\n  float depth = 0.2;\n\n  if (depth > 1.)\n  {\n      depth = 1.;\n  }\n  else if (depth < 0.)\n  {\n      depth = 0.;\n  }\n\n  float scale = 1.-depth;\n  float length = right - left;\n  float mysca = pi/length;\n\n  float mpos = (v_uv0.x - left)/length;\n  if (mpos < (1.-deepwid)/2. )\n  {\n      mpos = 1./(1.-deepwid)*(mpos);\n      scale = (1.-depth) + depth *(0.5001-0.5*(sin(-pi/2.+mpos*2.*pi)) );\n  }\n  else if( mpos > (1.+deepwid)/2.)\n  {\n      mpos = 1./(1.-deepwid)*(mpos-deepwid);\n      scale = (1.-depth)+ (depth)*(.5001-.5*( sin(-pi/2.+(mpos)*2.*pi) ) );\n  }\n  return scale;\n}\nvoid main () {\n\n  float scale = 1.;\n  float left  = pos.x - waterwid/2.;\n  float right = pos.x + waterwid/2.;\n  scale = CountScale(left,right);\n  vec4 mycolor = vec4(0.0);\n\n  mycolor = texture2D(texture, vec2(v_uv0.x,1./scale*(v_uv0.y-1.+scale))  );\n  gl_FragColor = mycolor;\n}\n"
      }
    }
  ],
  "subMetas": {}
}