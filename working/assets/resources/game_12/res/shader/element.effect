// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        width: {
          value: 0.0,
          inspector: {
            tooltip: "图片宽",
            range: [0.0, 2048.0]
          }
        }
        height: {
          value: 0.0,
          inspector: {
            tooltip: "图片高",
            range: [0.0, 2048.0]
          }
        }
        img_scale: {
          value: 0.0,
          inspector: {
            tooltip: "图片缩放",
            range: [0.0, 10.0]
          }
        }
        max_x: {
          value: 0.0,
          inspector: {
            tooltip: "x轴最大值",
            range: [0.0, 2048.0]
          }
        }
        max_scale_x: {
          value: 0.0,
          inspector: {
            tooltip: "最大缩放值x",
            range: [0.0, 10.0]
          }
        }
        max_scale_y: {
          value: 0.0,
          inspector: {
            tooltip: "最大缩放值y",
            range: [0.0, 10.0]
          }
        }
        circle_r: {
          value: 0.0,
          inspector: {
            tooltip: "半径",
            range: [0.0, 2048.0]
          }
        }
        point_x: {
          value: 0.0,
          inspector: {
            tooltip: "图片坐标x",
            range: [-2048.0, 2048.0]
          }
        }
        point_y: {
          value: 0.0,
          inspector: {
            tooltip: "图片坐标y",
            range: [-2048.0, 2048.0]
          }
        }
        u_dH: {
          value: 0.0,
          inspector: {
            tooltip: "色相",
            range: [-180.0, 180.0]
          }
        }
        u_dS: {
          value: 0.0,
          inspector: {
            tooltip: "饱和度",
            range: [-1.0, 1.0]
          }
        }
        u_dL: {
          value: 0.0,
          inspector: {
            tooltip: "亮度",
            range: [-1.0, 1.0]
          }
        }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif


  uniform curve {
    // 图片宽、高、对应圆半径、横轴x
    float width;
    float height;
    float img_scale;
    float max_x;
    float max_scale_x;
    float max_scale_y;
    float circle_r;
    float point_x;
    float point_y;
  };

  uniform ARGS {
    float u_dH;
    float u_dS;
    float u_dL;
  };
  void main () {
    // 图片宽、高、对应圆半径、横轴x
    // float width = 512.;
    // float height = 512.;
    // float img_scale = 0.25;
    float set_width = width * img_scale;
    float set_height = height * img_scale;

    // float max_x = 412.;
    // float max_scale_x = 0.5;
    // float circle_r = 175.;
    // float point_x = 0.;
    // float point_y = 150.;

    // float max_scale_y = 0.3;
    float set_x = point_x + (v_uv0.x-0.5)*set_width;
    float set_y = point_y - (v_uv0.y-0.5)*set_height;
    float switch_y = set_y;
    if(switch_y < 0.){
        switch_y = -1. * switch_y;
    }
    if(switch_y >= circle_r){
        switch_y = max_scale_y * set_y;
    }else{
        float temp_x = circle_r*circle_r - switch_y*switch_y;
        temp_x = sqrt(temp_x);
        float scale_y = 1.-((circle_r - temp_x)/circle_r)*(1.-max_scale_y);
        switch_y = scale_y * set_y;
    }
    float y = v_uv0.y - (set_y-switch_y)/set_height;

    // set_y = point_y - (y-0.5)*set_height;
    float scale_x = (set_x/max_x)*max_scale_x;
    if(set_x < 0.){
        scale_x = -1. * scale_x;
    }
    if(set_y>=circle_r){
        set_y = circle_r;
    }
    // 转换滚轴坐标
    float switch_x = circle_r*circle_r - set_y*set_y;
    switch_x = sqrt(switch_x); //理论应在

    switch_x = switch_x * scale_x; //实际在
    // float x = v_uv0.x + switch_x/set_width;
    // if(set_x < 0.){
    //     x = v_uv0.x - switch_x/set_width;
    // }
    float x = v_uv0.x - switch_x/set_width;
    if(set_x < 0.){
        x = v_uv0.x + switch_x/set_width;
    }

    vec4 o = vec4(1, 1, 1, 1);
    // v_uv0.x = v_uv0.x - 1.;
    // v_uv0.y = v_uv0.y - 1.;
    // float x = v_uv0.x;

    #if USE_TEXTURE
    o *= texture(texture, vec2(x, y));
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, vec2(x, y)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    float r=o.r;
    float g=o.g;
    float b=o.b;
    float a=o.a;
    //convert rgb to hsl
    float h;
    float s;
    float l;
    {
        float max=max(max(r,g),b);
        float min=min(min(r,g),b);
        //----h
        if(max==min){
            
            h=0.0;
        }else if(max==r&&g>=b){
            h=60.0*(g-b)/(max-min)+0.0;
        }else if(max==r&&g<b){
            h=60.0*(g-b)/(max-min)+360.0;
        }else if(max==g){
            h=60.0*(b-r)/(max-min)+120.0;
        }else if(max==b){
            h=60.0*(r-g)/(max-min)+240.0;
        }
        //----l
        l=0.5*(max+min);
        //----s
        if(l==0.0||max==min){
            s=0.0;
        }else if(0.0<=l&&l<=0.5){
            s=(max-min)/(2.0*l);
        }else if(l>0.5){
            s=(max-min)/(2.0-2.0*l);
        }
    }
    //(h,s,l)+(dH,dS,dL) -> (h,s,l)
    h=h+u_dH;
    s=min(1.0,max(0.0,s+u_dS));
    l=l;//do not use HSL model to adjust lightness, because the effect is not good
    //convert (h,s,l) to rgb and got final color
    vec4 finalColor;
    {
        float q;
        if(l<0.5){
            q=l*(1.0+s);
        }else if(l>=0.5){
            q=l+s-l*s;
        }
        float p=2.0*l-q;
        float hk=h/360.0;
        float t[3];
        t[0]=hk+1.0/3.0;t[1]=hk;t[2]=hk-1.0/3.0;
        for(int i=0;i<3;i++){
            if(t[i]<0.0)t[i]+=1.0;
            if(t[i]>1.0)t[i]-=1.0;
        }//got t[i]
        float c[3];
        for(int i=0;i<3;i++){
            if(t[i]<1.0/6.0){
                c[i]=p+((q-p)*6.0*t[i]);
            }else if(1.0/6.0<=t[i] && t[i]<0.5){
                c[i]=q;
            }else if(0.5<=t[i] && t[i]<2.0/3.0){
                c[i]=p+((q-p)*6.0*(2.0/3.0-t[i]));
            }else{
                c[i]=p;
            }
        }
        finalColor=vec4(c[0],c[1],c[2],a);
    }
    //actually, it is not final color. the lightness has not been adjusted
    //adjust lightness use the simplest method
    finalColor+=vec4(u_dL,u_dL,u_dL,0.0);
    
    // vec4 finalColor2 = vec4(1,0,0,1.0);
    // finalColor=finalColor+vec4(1,0,0,1.0);
    gl_FragColor=finalColor;
    // gl_FragColor = o;
  }
}%

