// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        width: {
          value: 0.0,
          inspector: {
            tooltip: "图片宽",
            range: [0.0, 2048.0]
          }
        }
        height: {
          value: 0.0,
          inspector: {
            tooltip: "图片高",
            range: [0.0, 2048.0]
          }
        }
        img_scale: {
          value: 0.0,
          inspector: {
            tooltip: "图片缩放",
            range: [0.0, 10.0]
          }
        }
        max_x: {
          value: 0.0,
          inspector: {
            tooltip: "x轴最大值",
            range: [0.0, 2048.0]
          }
        }
        max_scale_x: {
          value: 0.0,
          inspector: {
            tooltip: "最大缩放值x",
            range: [0.0, 10.0]
          }
        }
        max_scale_y: {
          value: 0.0,
          inspector: {
            tooltip: "最大缩放值y",
            range: [0.0, 10.0]
          }
        }
        circle_r: {
          value: 0.0,
          inspector: {
            tooltip: "半径",
            range: [0.0, 2048.0]
          }
        }
        point_x: {
          value: 0.0,
          inspector: {
            tooltip: "图片坐标x",
            range: [-2048.0, 2048.0]
          }
        }
        point_y: {
          value: 0.0,
          inspector: {
            tooltip: "图片坐标y",
            range: [-2048.0, 2048.0]
          }
        }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif


  uniform curve {
    // 图片宽、高、对应圆半径、横轴x
    float width;
    float height;
    float img_scale;
    float max_x;
    float max_scale_x;
    float max_scale_y;
    float circle_r;
    float point_x;
    float point_y;
  };

  void main () {
    // 图片宽、高、对应圆半径、横轴x
    // float width = 512.;
    // float height = 512.;
    // float img_scale = 0.25;
    float set_width = width * img_scale;
    float set_height = height * img_scale;

    // float max_x = 412.;
    // float max_scale_x = 0.5;
    // float circle_r = 175.;
    // float point_x = 0.;
    // float point_y = 150.;

    // float max_scale_y = 0.3;
    float set_x = point_x + (v_uv0.x-0.5)*set_width;
    float set_y = point_y - (v_uv0.y-0.5)*set_height;
    float switch_y = set_y;
    if(switch_y < 0.){
        switch_y = -1. * switch_y;
    }
    if(switch_y >= circle_r){
        switch_y = max_scale_y * set_y;
    }else{
        float temp_x = circle_r*circle_r - switch_y*switch_y;
        temp_x = sqrt(temp_x);
        float scale_y = 1.-((circle_r - temp_x)/circle_r)*(1.-max_scale_y);
        switch_y = scale_y * set_y;
    }
    float y = v_uv0.y - (set_y-switch_y)/set_height;

    // set_y = point_y - (y-0.5)*set_height;
    float scale_x = (set_x/max_x)*max_scale_x;
    if(set_x < 0.){
        scale_x = -1. * scale_x;
    }
    if(set_y>=circle_r){
        set_y = circle_r;
    }
    // 转换滚轴坐标
    float switch_x = circle_r*circle_r - set_y*set_y;
    switch_x = sqrt(switch_x); //理论应在

    switch_x = switch_x * scale_x; //实际在
    // float x = v_uv0.x + switch_x/set_width;
    // if(set_x < 0.){
    //     x = v_uv0.x - switch_x/set_width;
    // }
    float x = v_uv0.x - switch_x/set_width;
    if(set_x < 0.){
        x = v_uv0.x + switch_x/set_width;
    }

    vec4 o = vec4(1, 1, 1, 1);
    // v_uv0.x = v_uv0.x - 1.;
    // v_uv0.y = v_uv0.y - 1.;
    // float x = v_uv0.x;

    #if USE_TEXTURE
    o *= texture(texture, vec2(x, y));
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, vec2(x, y)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%

