{
  "ver": "1.0.23",
  "uuid": "4c0228b6-e450-48cf-8327-fcb0e0d4351e",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform float width;\nuniform float height;\nuniform float img_scale;\nuniform float max_x;\nuniform float max_scale_x;\nuniform float max_scale_y;\nuniform float circle_r;\nuniform float point_x;\nuniform float point_y;\n\nuniform float u_dH;\nuniform float u_dS;\nuniform float u_dL;\n\nvoid main () {\n\n  float set_width = width * img_scale;\n  float set_height = height * img_scale;\n\n  float set_x = point_x + (v_uv0.x-0.5)*set_width;\n  float set_y = point_y - (v_uv0.y-0.5)*set_height;\n  float switch_y = set_y;\n  if(switch_y < 0.){\n      switch_y = -1. * switch_y;\n  }\n  if(switch_y >= circle_r){\n      switch_y = max_scale_y * set_y;\n  }else{\n      float temp_x = circle_r*circle_r - switch_y*switch_y;\n      temp_x = sqrt(temp_x);\n      float scale_y = 1.-((circle_r - temp_x)/circle_r)*(1.-max_scale_y);\n      switch_y = scale_y * set_y;\n  }\n  float y = v_uv0.y - (set_y-switch_y)/set_height;\n\n  float scale_x = (set_x/max_x)*max_scale_x;\n  if(set_x < 0.){\n      scale_x = -1. * scale_x;\n  }\n  if(set_y>=circle_r){\n      set_y = circle_r;\n  }\n\n  float switch_x = circle_r*circle_r - set_y*set_y;\n  switch_x = sqrt(switch_x);\n\n  switch_x = switch_x * scale_x;\n\n  float x = v_uv0.x - switch_x/set_width;\n  if(set_x < 0.){\n      x = v_uv0.x + switch_x/set_width;\n  }\n\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, vec2(x, y));\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, vec2(x, y)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  float r=o.r;\n  float g=o.g;\n  float b=o.b;\n  float a=o.a;\n\n  float h;\n  float s;\n  float l;\n  {\n      float max=max(max(r,g),b);\n      float min=min(min(r,g),b);\n\n      if(max==min){\n          \n          h=0.0;\n      }else if(max==r&&g>=b){\n          h=60.0*(g-b)/(max-min)+0.0;\n      }else if(max==r&&g<b){\n          h=60.0*(g-b)/(max-min)+360.0;\n      }else if(max==g){\n          h=60.0*(b-r)/(max-min)+120.0;\n      }else if(max==b){\n          h=60.0*(r-g)/(max-min)+240.0;\n      }\n\n      l=0.5*(max+min);\n\n      if(l==0.0||max==min){\n          s=0.0;\n      }else if(0.0<=l&&l<=0.5){\n          s=(max-min)/(2.0*l);\n      }else if(l>0.5){\n          s=(max-min)/(2.0-2.0*l);\n      }\n  }\n\n  h=h+u_dH;\n  s=min(1.0,max(0.0,s+u_dS));\n  l=l;\n\n  vec4 finalColor;\n  {\n      float q;\n      if(l<0.5){\n          q=l*(1.0+s);\n      }else if(l>=0.5){\n          q=l+s-l*s;\n      }\n      float p=2.0*l-q;\n      float hk=h/360.0;\n      float t[3];\n      t[0]=hk+1.0/3.0;t[1]=hk;t[2]=hk-1.0/3.0;\n      for(int i=0;i<3;i++){\n          if(t[i]<0.0)t[i]+=1.0;\n          if(t[i]>1.0)t[i]-=1.0;\n      }\n\n      float c[3];\n      for(int i=0;i<3;i++){\n          if(t[i]<1.0/6.0){\n              c[i]=p+((q-p)*6.0*t[i]);\n          }else if(1.0/6.0<=t[i] && t[i]<0.5){\n              c[i]=q;\n          }else if(0.5<=t[i] && t[i]<2.0/3.0){\n              c[i]=p+((q-p)*6.0*(2.0/3.0-t[i]));\n          }else{\n              c[i]=p;\n          }\n      }\n      finalColor=vec4(c[0],c[1],c[2],a);\n  }\n\n  finalColor+=vec4(u_dL,u_dL,u_dL,0.0);\n\n  gl_FragColor=finalColor;\n\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform curve {\n\n  float width;\n  float height;\n  float img_scale;\n  float max_x;\n  float max_scale_x;\n  float max_scale_y;\n  float circle_r;\n  float point_x;\n  float point_y;\n};\n\nuniform ARGS {\n  float u_dH;\n  float u_dS;\n  float u_dL;\n};\nvoid main () {\n\n  float set_width = width * img_scale;\n  float set_height = height * img_scale;\n\n  float set_x = point_x + (v_uv0.x-0.5)*set_width;\n  float set_y = point_y - (v_uv0.y-0.5)*set_height;\n  float switch_y = set_y;\n  if(switch_y < 0.){\n      switch_y = -1. * switch_y;\n  }\n  if(switch_y >= circle_r){\n      switch_y = max_scale_y * set_y;\n  }else{\n      float temp_x = circle_r*circle_r - switch_y*switch_y;\n      temp_x = sqrt(temp_x);\n      float scale_y = 1.-((circle_r - temp_x)/circle_r)*(1.-max_scale_y);\n      switch_y = scale_y * set_y;\n  }\n  float y = v_uv0.y - (set_y-switch_y)/set_height;\n\n  float scale_x = (set_x/max_x)*max_scale_x;\n  if(set_x < 0.){\n      scale_x = -1. * scale_x;\n  }\n  if(set_y>=circle_r){\n      set_y = circle_r;\n  }\n\n  float switch_x = circle_r*circle_r - set_y*set_y;\n  switch_x = sqrt(switch_x);\n\n  switch_x = switch_x * scale_x;\n\n  float x = v_uv0.x - switch_x/set_width;\n  if(set_x < 0.){\n      x = v_uv0.x + switch_x/set_width;\n  }\n\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture(texture, vec2(x, y));\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, vec2(x, y)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  float r=o.r;\n  float g=o.g;\n  float b=o.b;\n  float a=o.a;\n\n  float h;\n  float s;\n  float l;\n  {\n      float max=max(max(r,g),b);\n      float min=min(min(r,g),b);\n\n      if(max==min){\n          \n          h=0.0;\n      }else if(max==r&&g>=b){\n          h=60.0*(g-b)/(max-min)+0.0;\n      }else if(max==r&&g<b){\n          h=60.0*(g-b)/(max-min)+360.0;\n      }else if(max==g){\n          h=60.0*(b-r)/(max-min)+120.0;\n      }else if(max==b){\n          h=60.0*(r-g)/(max-min)+240.0;\n      }\n\n      l=0.5*(max+min);\n\n      if(l==0.0||max==min){\n          s=0.0;\n      }else if(0.0<=l&&l<=0.5){\n          s=(max-min)/(2.0*l);\n      }else if(l>0.5){\n          s=(max-min)/(2.0-2.0*l);\n      }\n  }\n\n  h=h+u_dH;\n  s=min(1.0,max(0.0,s+u_dS));\n  l=l;\n\n  vec4 finalColor;\n  {\n      float q;\n      if(l<0.5){\n          q=l*(1.0+s);\n      }else if(l>=0.5){\n          q=l+s-l*s;\n      }\n      float p=2.0*l-q;\n      float hk=h/360.0;\n      float t[3];\n      t[0]=hk+1.0/3.0;t[1]=hk;t[2]=hk-1.0/3.0;\n      for(int i=0;i<3;i++){\n          if(t[i]<0.0)t[i]+=1.0;\n          if(t[i]>1.0)t[i]-=1.0;\n      }\n\n      float c[3];\n      for(int i=0;i<3;i++){\n          if(t[i]<1.0/6.0){\n              c[i]=p+((q-p)*6.0*t[i]);\n          }else if(1.0/6.0<=t[i] && t[i]<0.5){\n              c[i]=q;\n          }else if(0.5<=t[i] && t[i]<2.0/3.0){\n              c[i]=p+((q-p)*6.0*(2.0/3.0-t[i]));\n          }else{\n              c[i]=p;\n          }\n      }\n      finalColor=vec4(c[0],c[1],c[2],a);\n  }\n\n  finalColor+=vec4(u_dL,u_dL,u_dL,0.0);\n\n  gl_FragColor=finalColor;\n\n}\n"
      }
    }
  ],
  "subMetas": {}
}