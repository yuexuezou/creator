{
  "ver": "1.0.23",
  "uuid": "4c0228b6-e450-48cf-8327-fcb0e0d4351e",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nvoid main () {\n\n  float width = 512.;\n  float height = 512.;\n  float img_scale = 0.25;\n  width = width * img_scale;\n  height = height * img_scale;\n\n  float max_x = 412.;\n  float max_scale_x = 0.3;\n  float circle_r = 175.;\n  float point_x = 0.;\n  float point_y = 0.;\n  point_x = point_x + v_uv0.x*width;\n\n  point_y = point_y + v_uv0.y*height;\n  float scale_x = (point_x/max_x)*max_scale_x;\n\n  float switch_x = circle_r*circle_r - point_y*point_y;\n  switch_x = sqrt(switch_x);\n  switch_x = switch_x * scale_x;\n  float x = v_uv0.x - switch_x/width;\n\n  vec4 o = vec4(1, 1, 1, 1);\n\n  float y = v_uv0.y;\n  #if USE_TEXTURE\n  o *= texture2D(texture, vec2(x, y));\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, vec2(x, y)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nvoid main () {\n\n  float width = 512.;\n  float height = 512.;\n  float img_scale = 0.25;\n  width = width * img_scale;\n  height = height * img_scale;\n\n  float max_x = 412.;\n  float max_scale_x = 0.3;\n  float circle_r = 175.;\n  float point_x = 0.;\n  float point_y = 0.;\n  point_x = point_x + v_uv0.x*width;\n\n  point_y = point_y + v_uv0.y*height;\n  float scale_x = (point_x/max_x)*max_scale_x;\n\n  float switch_x = circle_r*circle_r - point_y*point_y;\n  switch_x = sqrt(switch_x);\n  switch_x = switch_x * scale_x;\n  float x = v_uv0.x - switch_x/width;\n\n  vec4 o = vec4(1, 1, 1, 1);\n\n  float y = v_uv0.y;\n  #if USE_TEXTURE\n  o *= texture(texture, vec2(x, y));\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, vec2(x, y)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n}\n"
      }
    }
  ],
  "subMetas": {}
}