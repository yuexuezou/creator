{
  "ver": "1.0.23",
  "uuid": "112f0ef8-d9e4-428a-9ac3-81a75f0c48fc",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\n\nattribute vec3 a_position;\n\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nattribute vec3 pos;\n\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n}\n",
        "frag": "\nprecision highp float;\n\nvarying vec2 v_uv0;\n\nuniform sampler2D texture;\n\nuniform float u_dH;\nuniform float u_dS;\nuniform float u_dL;\n\nconst float waterwid = 1.0;\nconst float deepwid = 0.01;\nconst float pi = 3.141592653589793;\n\nfloat CountScale(float left,float right)\n{\n\n  float depth = 0.5;\n\n  depth = 0.5;\n\n  float scale = 1.-depth;\n  float length = right - left;\n  float mysca = pi/length;\n\n  float mgl_FragColor = (v_uv0.x - left)/length;\n  if (mgl_FragColor < (1.-deepwid)/2. )\n  {\n      mgl_FragColor = 1./(1.-deepwid)*(mgl_FragColor);\n      scale = (1.-depth) + depth *(0.5001-0.5*(sin(-pi/2.+mgl_FragColor*2.*pi)) );\n  }\n  else if( mgl_FragColor > (1.+deepwid)/2.)\n  {\n      mgl_FragColor = 1./(1.-deepwid)*(mgl_FragColor-deepwid);\n      scale = (1.-depth)+ (depth)*(.5001-.5*( sin(-pi/2.+(mgl_FragColor)*2.*pi) ) );\n  }\n  return scale;\n}\nvoid main () {\n  float scale = 1.;\n  float left  = gl_FragColor.x - waterwid/2.;\n  float right = gl_FragColor.x + waterwid/2.;\n\n  vec4 texColor=texture2D(texture, vec2(v_uv0.x, v_uv0.y));\n\n  float r=texColor.r;\n  float g=texColor.g;\n  float b=texColor.b;\n  float a=texColor.a;\n\n  float h;\n  float s;\n  float l;\n  {\n      float max=max(max(r,g),b);\n      float min=min(min(r,g),b);\n\n      if(max==min){\n          \n          h=0.0;\n      }else if(max==r&&g>=b){\n          h=60.0*(g-b)/(max-min)+0.0;\n      }else if(max==r&&g<b){\n          h=60.0*(g-b)/(max-min)+360.0;\n      }else if(max==g){\n          h=60.0*(b-r)/(max-min)+120.0;\n      }else if(max==b){\n          h=60.0*(r-g)/(max-min)+240.0;\n      }\n\n      l=0.5*(max+min);\n\n      if(l==0.0||max==min){\n          s=0.0;\n      }else if(0.0<=l&&l<=0.5){\n          s=(max-min)/(2.0*l);\n      }else if(l>0.5){\n          s=(max-min)/(2.0-2.0*l);\n      }\n  }\n\n  h=h+u_dH;\n  s=min(1.0,max(0.0,s+u_dS));\n  l=l;\n\n  vec4 finalColor;\n  {\n      float q;\n      if(l<0.5){\n          q=l*(1.0+s);\n      }else if(l>=0.5){\n          q=l+s-l*s;\n      }\n      float p=2.0*l-q;\n      float hk=h/360.0;\n      float t[3];\n      t[0]=hk+1.0/3.0;t[1]=hk;t[2]=hk-1.0/3.0;\n      for(int i=0;i<3;i++){\n          if(t[i]<0.0)t[i]+=1.0;\n          if(t[i]>1.0)t[i]-=1.0;\n      }\n\n      float c[3];\n      for(int i=0;i<3;i++){\n          if(t[i]<1.0/6.0){\n              c[i]=p+((q-p)*6.0*t[i]);\n          }else if(1.0/6.0<=t[i] && t[i]<0.5){\n              c[i]=q;\n          }else if(0.5<=t[i] && t[i]<2.0/3.0){\n              c[i]=p+((q-p)*6.0*(2.0/3.0-t[i]));\n          }else{\n              c[i]=p;\n          }\n      }\n      finalColor=vec4(c[0],c[1],c[2],a);\n  }\n\n  finalColor+=vec4(u_dL,u_dL,u_dL,0.0);\n\n  gl_FragColor=finalColor;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\n\nin vec2 a_uv0;\nout vec2 v_uv0;\nin vec3 pos;\n\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n}\n",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec2 v_uv0;\n\nuniform sampler2D texture;\n\nuniform ARGS {\n  float u_dH;\n  float u_dS;\n  float u_dL;\n};\nout vec3 pos;\nconst float waterwid = 1.0;\nconst float deepwid = 0.01;\nconst float pi = 3.141592653589793;\n\nfloat CountScale(float left,float right)\n{\n\n  float depth = 0.5;\n\n  depth = 0.5;\n\n  float scale = 1.-depth;\n  float length = right - left;\n  float mysca = pi/length;\n\n  float mpos = (v_uv0.x - left)/length;\n  if (mpos < (1.-deepwid)/2. )\n  {\n      mpos = 1./(1.-deepwid)*(mpos);\n      scale = (1.-depth) + depth *(0.5001-0.5*(sin(-pi/2.+mpos*2.*pi)) );\n  }\n  else if( mpos > (1.+deepwid)/2.)\n  {\n      mpos = 1./(1.-deepwid)*(mpos-deepwid);\n      scale = (1.-depth)+ (depth)*(.5001-.5*( sin(-pi/2.+(mpos)*2.*pi) ) );\n  }\n  return scale;\n}\nvoid main () {\n  float scale = 1.;\n  float left  = pos.x - waterwid/2.;\n  float right = pos.x + waterwid/2.;\n\n  vec4 texColor=texture2D(texture, vec2(v_uv0.x, v_uv0.y));\n\n  float r=texColor.r;\n  float g=texColor.g;\n  float b=texColor.b;\n  float a=texColor.a;\n\n  float h;\n  float s;\n  float l;\n  {\n      float max=max(max(r,g),b);\n      float min=min(min(r,g),b);\n\n      if(max==min){\n          \n          h=0.0;\n      }else if(max==r&&g>=b){\n          h=60.0*(g-b)/(max-min)+0.0;\n      }else if(max==r&&g<b){\n          h=60.0*(g-b)/(max-min)+360.0;\n      }else if(max==g){\n          h=60.0*(b-r)/(max-min)+120.0;\n      }else if(max==b){\n          h=60.0*(r-g)/(max-min)+240.0;\n      }\n\n      l=0.5*(max+min);\n\n      if(l==0.0||max==min){\n          s=0.0;\n      }else if(0.0<=l&&l<=0.5){\n          s=(max-min)/(2.0*l);\n      }else if(l>0.5){\n          s=(max-min)/(2.0-2.0*l);\n      }\n  }\n\n  h=h+u_dH;\n  s=min(1.0,max(0.0,s+u_dS));\n  l=l;\n\n  vec4 finalColor;\n  {\n      float q;\n      if(l<0.5){\n          q=l*(1.0+s);\n      }else if(l>=0.5){\n          q=l+s-l*s;\n      }\n      float p=2.0*l-q;\n      float hk=h/360.0;\n      float t[3];\n      t[0]=hk+1.0/3.0;t[1]=hk;t[2]=hk-1.0/3.0;\n      for(int i=0;i<3;i++){\n          if(t[i]<0.0)t[i]+=1.0;\n          if(t[i]>1.0)t[i]-=1.0;\n      }\n\n      float c[3];\n      for(int i=0;i<3;i++){\n          if(t[i]<1.0/6.0){\n              c[i]=p+((q-p)*6.0*t[i]);\n          }else if(1.0/6.0<=t[i] && t[i]<0.5){\n              c[i]=q;\n          }else if(0.5<=t[i] && t[i]<2.0/3.0){\n              c[i]=p+((q-p)*6.0*(2.0/3.0-t[i]));\n          }else{\n              c[i]=p;\n          }\n      }\n      finalColor=vec4(c[0],c[1],c[2],a);\n  }\n\n  finalColor+=vec4(u_dL,u_dL,u_dL,0.0);\n\n  gl_FragColor=finalColor;\n}\n"
      }
    }
  ],
  "subMetas": {}
}